AWSTemplateFormatVersion:       "2010-09-09"
Transform:                      AWS::Serverless-2016-10-31
Description:                    "An example template with an IAM role for a Lambda state machine."
Resources:
  LambdaExecutionRole:
    Type:                       "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version:                "2012-10-17"
        Statement:
         - Effect:              Allow
           Principal:
             Service:           lambda.amazonaws.com
           Action:              "sts:AssumeRole"

  getParty:
    Type:                       "AWS::Serverless::Function"
    Properties:
      Handler:                  "party.getParty"
      Role:                     !GetAtt [ LambdaExecutionRole, Arn ]
      CodeUri:                  "../party/"
      Runtime:                  "python3.6"

  createParty:
    Type:                       "AWS::Serverless::Function"
    Properties:
      Handler:                  "party.createParty"
      Role:                     !GetAtt [ LambdaExecutionRole, Arn ]
      CodeUri:                  "../party/"
      Runtime:                  "python3.6"

  getAllParties:
    Type:                       "AWS::Serverless::Function"
    Properties:
      Handler:                  "party.getAllParties"
      Role:                     !GetAtt [ LambdaExecutionRole, Arn ]
      CodeUri:                  "../party/"
      Runtime:                  "python3.6"

  getPartyScore:
    Type:                       "AWS::Serverless::Function"
    Properties:
      Handler:                  "party.getPartyScore"
      Role:                     !GetAtt [ LambdaExecutionRole, Arn ]
      CodeUri:                  "../party/"
      Runtime:                  "python3.6"

  getFacility:
    Type:                       "AWS::Serverless::Function"
    Properties:
      Handler:                  "facility.getFacility"
      Role:                     !GetAtt [ LambdaExecutionRole, Arn ]
      CodeUri:                  "../facility/"
      Runtime:                  "python3.6"

  createFacility:
    Type:                       "AWS::Serverless::Function"
    Properties:
      Handler:                  "facility.createFacility"
      Role:                     !GetAtt [ LambdaExecutionRole, Arn ]
      CodeUri:                  "../facility/"
      Runtime:                  "python3.6"

  updateCreditLimit:
    Type:                       "AWS::Serverless::Function"
    Properties:
      Handler:                  "facility.updateCreditLimit"
      Role:                     !GetAtt [ LambdaExecutionRole, Arn ]
      CodeUri:                  "../facility/"
      Runtime:                  "python3.6"

  facilityAddBlockedCustomers:
    Type:                       "AWS::Serverless::Function"
    Properties:
      Handler:                  "facility.addBlockedCustomers"
      Role:                     !GetAtt [ LambdaExecutionRole, Arn ]
      CodeUri:                  "../facility/"
      Runtime:                  "python3.6"

  fulfillmentAddBlockedCustomers:
    Type:                       "AWS::Serverless::Function"
    Properties:
      Handler:                  "fulfillment.addBlockedCustomers"
      Role:                     !GetAtt [ LambdaExecutionRole, Arn ]
      CodeUri:                  "../fulfillment/"
      Runtime:                  "python3.6"

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

  MyDB:
    Type:                       AWS::RDS::DBInstance
    Properties:
      DBSecurityGroups:
      - Ref:                    RDSSecurityGroup
      VPCSecurityGroups:        !GetAtt RDSSecurityGroup.GroupId
      AllocatedStorage:        '5'
      DBInstanceClass:          db.t1.micro
      Engine:                   MySQL
      MasterUsername:           admin
      MasterUserPassword:       Password123
    DeletionPolicy:             Snapshot



